import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import requests
from io import BytesIO

class ComparadorGundams:
    def __init__(self):
        self.gundams = {
            'V Gundam': {
                'piloto': 'Amuro Ray',
                'tipo_piloto': 'New Type',
                'nivel_piloto': 10,
                'estadisticas': {
                    'Velocidad': 8,
                    'Armadura': 7,
                    'Armamento': 9,
                    'Movilidad': 9,
                    'Tecnolog√≠a': 8,
                    'Defensa': 8,
                    'Psycho Frame': 8,
                    'Funnels': 6,
                    'Habilidad Piloto': 10
                },
                'color': 'blue',
                'imagen_url': 'https://i.pinimg.com/1200x/7c/b8/85/7cb88550061f33579a898d12503d569e.jpg'
            },
            'Sazabi': {
                'piloto': 'Char Aznable',
                'tipo_piloto': 'New Type',
                'nivel_piloto': 7,
                'estadisticas': {
                    'Velocidad': 6,
                    'Armadura': 9,
                    'Armamento': 10,
                    'Movilidad': 7,
                    'Tecnolog√≠a': 7,
                    'Defensa': 9,
                    'Psycho Frame': 7,
                    'Funnels': 6,
                    'Habilidad Piloto': 7
                },
                'color': 'red',
                'imagen_url': 'https://i.pinimg.com/1200x/02/db/8a/02db8a74fd75230f0889153466921318.jpg'
            },
            'Unicorn Gundam': {
                'piloto': 'Banagher Links',
                'tipo_piloto': 'Cyber New Type',
                'nivel_piloto': 9,
                'estadisticas': {
                    'Velocidad': 9,
                    'Armadura': 8,
                    'Armamento': 8,
                    'Movilidad': 8,
                    'Tecnolog√≠a': 10,
                    'Defensa': 9,
                    'Psycho Frame': 10,
                    'Funnels': 0,
                    'Habilidad Piloto': 9
                },
                'color': 'purple',
                'imagen_url': 'https://i.pinimg.com/1200x/52/1d/2a/521d2a7e1fc0166c963a143ab6ac7bae.jpg'
            },
            'Sinanju': {
                'piloto': 'Full Frontal',
                'tipo_piloto': 'Cyber New Type',
                'nivel_piloto': 9,
                'estadisticas': {
                    'Velocidad': 10,
                    'Armadura': 8,
                    'Armamento': 9,
                    'Movilidad': 10,
                    'Tecnolog√≠a': 8,
                    'Defensa': 7,
                    'Psycho Frame': 6,
                    'Funnels': 0,
                    'Habilidad Piloto': 9
                },
                'color': 'gold',
                'imagen_url': 'https://i.pinimg.com/1200x/46/79/fe/4679fe1c5294d017651ef91b8f295711.jpg'
            },
            'Kshatriya': {
                'piloto': 'Marida Cruz',
                'tipo_piloto': 'Cyber New Type',
                'nivel_piloto': 8,
                'estadisticas': {
                    'Velocidad': 5,
                    'Armadura': 8,
                    'Armamento': 9,
                    'Movilidad': 6,
                    'Tecnolog√≠a': 8,
                    'Defensa': 8,
                    'Psycho Frame': 7,
                    'Funnels': 24,
                    'Habilidad Piloto': 8
                },
                'color': 'green',
                'imagen_url': 'https://i.pinimg.com/736x/0a/24/cc/0a24cc74549fd771c1aa2f70f769096d.jpg'
            },
            'Banshee': {
                'piloto': 'Riddhe Marcenas',
                'tipo_piloto': 'New Type',
                'nivel_piloto': 6,
                'estadisticas': {
                    'Velocidad': 8,
                    'Armadura': 9,
                    'Armamento': 8,
                    'Movilidad': 7,
                    'Tecnolog√≠a': 9,
                    'Defensa': 9,
                    'Psycho Frame': 9,
                    'Funnels': 0,
                    'Habilidad Piloto': 6
                },
                'color': 'black',
                'imagen_url': 'https://i.pinimg.com/736x/04/ec/71/04ec71a98fcfea7ffa99faff35dcaa60.jpg'
            }
        }
        
        self.imagenes = {}
        self.cargar_imagenes()
    
    def cargar_imagenes(self):
        print("Cargando im√°genes de Gundams...")
        for nombre, info in self.gundams.items():
            try:
                response = requests.get(info['imagen_url'], timeout=10)
                img = Image.open(BytesIO(response.content))
                self.imagenes[nombre] = img
                print(f"‚úÖ {nombre} - Cargado correctamente")
            except Exception as e:
                print(f"‚ùå Error cargando {nombre}: {e}")
                self.imagenes[nombre] = None
    
    def mostrar_menu(self):
        print("\n" + "="*50)
        print("           üöÄ COMPARADOR DE GUNDAMS üöÄ")
        print("="*50)
        print("Gundams disponibles:")
        for i, gundam in enumerate(self.gundams.keys(), 1):
            piloto = self.gundams[gundam]['piloto']
            tipo = self.gundams[gundam]['tipo_piloto']
            print(f"  {i}. {gundam:15} - {piloto} ({tipo})")
        print("  " + "‚îÄ" * 45)
        print("  0. Comparar TODOS los Gundams")
        print("  " + "‚îÄ" * 45)
    
    def obtener_seleccion(self):
        self.mostrar_menu()
        try:
            print("\nüìù INSTRUCCIONES: Usa los N√öMEROS del men√∫ (ej: 1,3,5)")
            print("   0 = Todos los Gundams")
            seleccion = input("üéØ Selecciona por N√öMERO los Gundams a comparar: ")
            
            if seleccion.strip() == '0':
                return list(self.gundams.keys())
            
            indices = [int(x.strip()) for x in seleccion.split(',')]
            gundams_seleccionados = []
            
            for idx in indices:
                if 1 <= idx <= len(self.gundams):
                    gundam = list(self.gundams.keys())[idx - 1]
                    gundams_seleccionados.append(gundam)
                else:
                    print(f"‚ùå N√öMERO {idx} inv√°lido. Usa n√∫meros entre 1-{len(self.gundams)}")
                    return None
            
            return gundams_seleccionados
        except ValueError:
            print("‚ùå Entrada inv√°lida. Por favor usa s√≥lo N√öMEROS separados por comas.")
            return None
    
    def mostrar_imagen_gundam(self, gundam):
        if gundam in self.imagenes and self.imagenes[gundam] is not None:
            plt.figure(figsize=(8, 6))
            plt.imshow(self.imagenes[gundam])
            piloto_info = f"{self.gundams[gundam]['piloto']} ({self.gundams[gundam]['tipo_piloto']})"
            plt.title(f'{gundam}\n{piloto_info}', 
                     fontsize=14, fontweight='bold', pad=20)
            plt.axis('off')
            plt.tight_layout()
            plt.show()
        else:
            print(f"‚ö†Ô∏è  Imagen no disponible para {gundam}")
    
    def grafica_radar_gundams(self, gundams_seleccionados):
        categorias = list(self.gundams[gundams_seleccionados[0]]['estadisticas'].keys())
        
        angulos = np.linspace(0, 2*np.pi, len(categorias), endpoint=False).tolist()
        angulos += angulos[:1]
        
        fig, ax = plt.subplots(figsize=(12, 10), subplot_kw=dict(projection='polar'))
        
        for gundam in gundams_seleccionados:
            stats = list(self.gundams[gundam]['estadisticas'].values())
            stats += stats[:1]
            color = self.gundams[gundam]['color']
            piloto = self.gundams[gundam]['piloto']
            tipo_piloto = self.gundams[gundam]['tipo_piloto']
            
            ax.plot(angulos, stats, 'o-', linewidth=3, 
                   label=f'{gundam}\n({piloto} - {tipo_piloto})', 
                   color=color, markersize=6)
            ax.fill(angulos, stats, alpha=0.2, color=color)
        
        ax.set_xticks(angulos[:-1])
        ax.set_xticklabels(categorias, fontsize=11, fontweight='bold')
        ax.set_ylim(0, 10)
        ax.set_yticks([2, 4, 6, 8, 10])
        ax.grid(True, alpha=0.3)
        
        titulo = 'Comparaci√≥n de Gundams' if len(gundams_seleccionados) > 1 else f'Estad√≠sticas de {gundams_seleccionados[0]}'
        plt.title(f'{titulo}\n(Escala 1-10)', size=16, y=1.05, fontweight='bold', pad=20)
        plt.legend(loc='upper right', bbox_to_anchor=(1.4, 1.0), fontsize=9)
        plt.tight_layout()
        plt.show()
    
    def grafica_barras_gundams(self, gundams_seleccionados):
        categorias = list(self.gundams[gundams_seleccionados[0]]['estadisticas'].keys())
        
        x = np.arange(len(categorias))
        ancho = 0.8 / len(gundams_seleccionados)
        
        plt.figure(figsize=(16, 8))
        
        for i, gundam in enumerate(gundams_seleccionados):
            stats = list(self.gundams[gundam]['estadisticas'].values())
            color = self.gundams[gundam]['color']
            desplazamiento = ancho * i
            
            plt.bar(x + desplazamiento, stats, width=ancho, label=f'{gundam}', 
                    alpha=0.8, color=color, edgecolor='black', linewidth=0.5)
        
        plt.xlabel('Categor√≠as', fontsize=12, fontweight='bold')
        plt.ylabel('Puntuaci√≥n (1-10)', fontsize=12, fontweight='bold')
        
        titulo = 'Comparaci√≥n de Gundams' if len(gundams_seleccionados) > 1 else f'Estad√≠sticas de {gundams_seleccionados[0]}'
        plt.title(titulo, fontsize=14, fontweight='bold', pad=20)
        
        plt.xticks(x + ancho * (len(gundams_seleccionados) - 1) / 2, categorias, 
                  rotation=45, ha='right', fontweight='bold')
        plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.grid(True, alpha=0.3, axis='y')
        plt.ylim(0, 11)
        plt.tight_layout()
        plt.show()
    
    def mostrar_info_detallada(self, gundam):
        info = self.gundams[gundam]
        print(f"\n{'='*60}")
        print(f"üéØ {gundam.upper()}")
        print(f"{'='*60}")
        print(f"üë®‚ÄçüöÄ Piloto: {info['piloto']}")
        print(f"üß† Tipo: {info['tipo_piloto']} - Nivel: {info['nivel_piloto']}/10")
        print("\nüìä Estad√≠sticas:")
        for categoria, valor in info['estadisticas'].items():
            barra = "‚ñà" * valor + "‚ñë" * (10 - valor)
            print(f"  {categoria:15}: {barra} {valor}/10")
        
        self.analizar_gundam(gundam)
    
    def analizar_gundam(self, gundam):
        stats = self.gundams[gundam]['estadisticas']
        tipo_piloto = self.gundams[gundam]['tipo_piloto']
        nivel_piloto = self.gundams[gundam]['nivel_piloto']
        
        print(f"\nüîç An√°lisis t√°ctico:")
        
        caracteristicas = []
        
        if nivel_piloto >= 9:
            if tipo_piloto == 'New Type':
                caracteristicas.append("üß† New Type legendario - Habilidades ps√≠quicas m√°ximas")
            else:
                caracteristicas.append("ü§ñ Cyber New Type excepcional - Poder ps√≠quico superior")
        elif nivel_piloto >= 7:
            caracteristicas.append(f"‚≠ê {tipo_piloto} competente - Buen control ps√≠quico")
        
        if stats['Psycho Frame'] >= 9:
            caracteristicas.append("üåÄ Sistema Psycho Frame avanzado")
        elif stats['Psycho Frame'] >= 7:
            caracteristicas.append("‚ú® Sistema Psycho Frame est√°ndar")
            
        if stats['Funnels'] >= 20:
            caracteristicas.append("üéØ Funnels masivos (ataque omnidireccional)")
        elif stats['Funnels'] >= 5:
            caracteristicas.append("üì° Sistema de Funnels")
            
        if stats['Velocidad'] >= 9:
            caracteristicas.append("üöÄ Velocidad excepcional")
        elif stats['Velocidad'] <= 5:
            caracteristicas.append("üê¢ Movimiento limitado")
            
        if stats['Armamento'] >= 9:
            caracteristicas.append("üí• Armamento pesado")
            
        if stats['Movilidad'] >= 9:
            caracteristicas.append("ü§∏ Agilidad superior")
            
        if stats['Tecnolog√≠a'] >= 9:
            caracteristicas.append("üî¨ Tecnolog√≠a de vanguardia")
        
        if stats['Habilidad Piloto'] >= 9:
            caracteristicas.append("üéØ Piloto de √©lite - Precisi√≥n m√°xima")
        
        for carac in caracteristicas:
            print(f"  ‚Ä¢ {carac}")
    
    def resumen_comparativo(self, gundams_seleccionados):
        if len(gundams_seleccionados) <= 1:
            return
            
        print(f"\n{'='*60}")
        print("üìà RESUMEN COMPARATIVO")
        print(f"{'='*60}")
        
        categorias = list(self.gundams[gundams_seleccionados[0]]['estadisticas'].keys())
        
        for categoria in categorias:
            valores = [self.gundams[g]['estadisticas'][categoria] for g in gundams_seleccionados]
            max_val = max(valores)
            mejores = [g for g in gundams_seleccionados if self.gundams[g]['estadisticas'][categoria] == max_val]
            
            if len(mejores) == 1:
                print(f"üèÜ {categoria:15}: {mejores[0]} ({max_val}/10)")
            else:
                print(f"üèÜ {categoria:15}: Empate entre {', '.join(mejores)} ({max_val}/10)")
    
    def calcular_ranking_final(self, gundams_seleccionados):
        print(f"\n{'='*60}")
        print("üèÜ RANKING FINAL - MEJORES GUNDAMS")
        print(f"{'='*60}")
        
        puntuaciones = {}
        for gundam in gundams_seleccionados:
            stats = self.gundams[gundam]['estadisticas']
            puntuacion_total = sum(stats.values())
            puntuaciones[gundam] = puntuacion_total
        
        ranking = sorted(puntuaciones.items(), key=lambda x: x[1], reverse=True)
        
        for i, (gundam, puntuacion) in enumerate(ranking, 1):
            max_puntos = len(self.gundams[gundam]['estadisticas']) * 10
            porcentaje = (puntuacion / max_puntos) * 100
            
            print(f"\n#{i} {gundam}")
            print(f"   Puntuaci√≥n total: {puntuacion}/{max_puntos} puntos")
            print(f"   Eficiencia general: {porcentaje:.1f}%")
            print(f"   Piloto: {self.gundams[gundam]['piloto']} ({self.gundams[gundam]['tipo_piloto']})")
            
            if i <= 3:
                self.mostrar_fortalezas(gundam)
        
        if ranking:
            ganador = ranking[0][0]
            print(f"\nüéâ ¬°{ganador} es el GUNDAM GANADOR!")
            print(f"   Conductor: {self.gundams[ganador]['piloto']} ({self.gundams[ganador]['tipo_piloto']})")
            self.analizar_victoria(ganador, ranking)
    
    def mostrar_fortalezas(self, gundam):
        stats = self.gundams[gundam]['estadisticas']
        mejores_stats = sorted(stats.items(), key=lambda x: x[1], reverse=True)[:3]
        
        print("   Fortalezas principales:")
        for categoria, valor in mejores_stats:
            print(f"     ‚Ä¢ {categoria}: {valor}/10")
    
    def analizar_victoria(self, ganador, ranking):
        stats_ganador = self.gundams[ganador]['estadisticas']
        tipo_piloto = self.gundams[ganador]['tipo_piloto']
        nivel_piloto = self.gundams[ganador]['nivel_piloto']
        
        print(f"\nüîç AN√ÅLISIS DE LA VICTORIA:")
        
        if nivel_piloto >= 9:
            if tipo_piloto == 'New Type':
                print("   ‚Ä¢ New Type legendario - Habilidades ps√≠quicas insuperables")
            else:
                print("   ‚Ä¢ Cyber New Type excepcional - Control mental superior")
        
        if stats_ganador['Psycho Frame'] >= 9:
            print("   ‚Ä¢ Sistema Psycho Frame avanzado - Ventaja t√°ctica decisiva")
        if stats_ganador['Velocidad'] >= 9 and stats_ganador['Movilidad'] >= 9:
            print("   ‚Ä¢ Combinaci√≥n perfecta de velocidad y movilidad")
        if stats_ganador['Armamento'] >= 9 and stats_ganador['Tecnolog√≠a'] >= 9:
            print("   ‚Ä¢ Tecnolog√≠a avanzada con poder de fuego excepcional")
        if stats_ganador['Habilidad Piloto'] >= 9:
            print("   ‚Ä¢ Piloto de √©lite - Precisi√≥n y timing perfectos")
        
        if len(ranking) > 1:
            segundo = ranking[1][0]
            diff = ranking[0][1] - ranking[1][1]
            print(f"   ‚Ä¢ Supera a {segundo} por {diff} puntos de eficiencia")
        
        max_stat = max(stats_ganador.items(), key=lambda x: x[1])
        print(f"   ‚Ä¢ Mayor fortaleza: {max_stat[0]} ({max_stat[1]}/10)")
    
    def ejecutar(self):
        print("üöÄ Iniciando Comparador de Gundams...")
        
        while True:
            gundams_seleccionados = self.obtener_seleccion()
            
            if not gundams_seleccionados:
                print("‚ùå Selecci√≥n inv√°lida. Intenta nuevamente.")
                continue
            
            print(f"\n‚úÖ Comparando: {', '.join(gundams_seleccionados)}")
            
            ver_imagenes = input("\nüëÄ ¬øQuieres ver las im√°genes de los Gundams? (s/n): ")
            if ver_imagenes.lower() == 's':
                for gundam in gundams_seleccionados:
                    self.mostrar_imagen_gundam(gundam)
            
            for gundam in gundams_seleccionados:
                self.mostrar_info_detallada(gundam)
            
            if len(gundams_seleccionados) > 1:
                self.resumen_comparativo(gundams_seleccionados)
                self.calcular_ranking_final(gundams_seleccionados)
            
            print(f"\n{'‚îÄ'*50}")
            print("üìä OPCIONES DE GR√ÅFICAS:")
            print("  1. Gr√°fica de Radar")
            print("  2. Gr√°fica de Barras")
            print("  3. Ambas gr√°ficas")
            print("  4. Continuar sin gr√°ficas")
            
            opcion = input("üé® Selecciona (1-4): ")
            
            if opcion in ['1', '3']:
                print("üîÑ Generando gr√°fica de radar...")
                self.grafica_radar_gundams(gundams_seleccionados)
            if opcion in ['2', '3']:
                print("üîÑ Generando gr√°fica de barras...")
                self.grafica_barras_gundams(gundams_seleccionados)
            
            continuar = input("\nüîÑ ¬øQuieres hacer otra comparaci√≥n? (s/n): ")
            if continuar.lower() != 's':
                print("\nüëã ¬°Hasta la pr√≥xima, piloto!")
                break

if __name__ == "__main__":
    try:
        comparador = ComparadorGundams()
        comparador.ejecutar()
    except KeyboardInterrupt:
        print("\n\nüëã Programa interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")